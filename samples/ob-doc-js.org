#+TITLE: Org-babel-js
#+AUTHOR: stardiviner
#+STARTUP: nofold

* hello, world demo

#+BEGIN_SRC js
  console.log("Hello, World!");
#+END_SRC

#+RESULTS:
: Hello, World!


* Configuration

#+BEGIN_SRC emacs-lisp
  (require 'ob-js)
  (add-to-list 'org-babel-load-languages '(js . t))
  (org-babel-do-load-languages 'org-babel -load-languages org-babel-load-languages)
  (add-to-list 'org-babel-tangle-lang-exts '("js" . "js"))
#+END_SRC

* Use JavaScript libraries

src_js{console.log()} is supported by default.

#+BEGIN_SRC js
  var util = require("util");
  console.log("this is a Node.js test program!");
#+END_SRC

#+RESULTS:
: this is a Node.js test program!

* Support session for many Emacs packages

The header argument :session value of packages REPL buffer names are default.

And they all support for auto initiate session with ob-core.el
built-in function ~org-babel-initiate-session~, which is used by
commands like ~org-babel-switch-to-session~ / ([C-c C-v C-z]).

** Indium

#+BEGIN_SRC js :session "*JS REPL*"
  console.log("stardiviner")
#+END_SRC

** skewer-mode

#+BEGIN_SRC js :session "*skewer-repl*"
  console.log("stardiviner")
#+END_SRC

** js-comint

#+BEGIN_SRC js :session "*Javascript REPL*"
  console.log("stardiviner")
#+END_SRC

** helper command to insert session header argument

I write an helper command to insert session header argument easily:

#+BEGIN_SRC emacs-lisp
  (defun ob-js-insert-session-header-arg (session)
    "Insert ob-js `SESSION' header argument.
  - `js-comint'
  - `skewer-mode'
  - `Indium'
  "
    (interactive (list (completing-read "ob-js session: "
                                        '("js-comint" "skewer-mode" "indium"))))
    (org-babel-insert-header-arg
     "session"
      (pcase session
       ("js-comint" "\"*Javascript REPL*\"")
       ("skewer-mode" "\"*skewer-repl*\"")
       ("indium" "\"*JS REPL*\""))))

  (define-key org-babel-map (kbd "J") 'ob-js-insert-session-header-arg)
#+END_SRC

